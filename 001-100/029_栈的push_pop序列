题目：输入两个整数序列。其中一个序列表示栈的push 顺序，
判断另一个序列有没有可能是对应的pop 顺序。
为了简单起见，我们假设push 序列的任意两个整数都是不相等的。
比如输入的push 序列是1、2、3、4、5，那么4、5、3、2、1 就有可能是一个pop 系列。
因为可以有如下的push 和pop 序列：
push 1，push 2，push 3，push 4，pop，push 5，pop，pop，pop，pop，
这样得到的pop 序列就是4、5、3、2、1。
但序列4、3、5、1、2 就不可能是push 序列1、2、3、4、5 的pop 序列。


思路：

1.首先新建一个栈模拟入栈入栈，都是在push序列中进行。

2.将push序列依次开始入栈，直到栈顶元素等于pop序列的第一个元素。

3.push的栈顶元素出栈，pop序列移到第二元素。

4.如果push栈顶继续等于pop序列现在的元素，则继续出栈并pop后移。

5.如果push已经全部入栈但是pop序列未遍历结束，且栈顶元素不等于现在所指元素则返回false。

Answer:

public boolean isPopSerial(int[] push, int[] pop, int n) {
    int i = 0, j = 0;
    Stack<Integer> stack = new Stack<>();
    while (i < n) {
        stack.push(push[i]);
        i++;
        while (!stack.isEmpty() && stack.peek() == pop[j]) {
            stack.pop();
            j++;
        }
    }
    if (stack.isEmpty() && j == n) return true;
    return false;

}