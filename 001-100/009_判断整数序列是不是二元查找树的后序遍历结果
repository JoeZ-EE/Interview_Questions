题目：输入一个整数数组，判断该数组是不是某二元查找树的后序遍历的结果。
如果是返回true，否则返回false。
例如输入5、7、6、9、11、10、8，由于这一整数序列是如下树的后序遍历结果：
8
/ \
6 10
/ \ / \
5 7 9 11
因此返回true。
如果输入7、4、6、5，没有哪棵树的后序遍历的结果是这个序列，因此返回false。

树的题目一般都是递归的思路，因为是因为是排序树，而且是后序，
所以思路是序列最后一个必是根节点，从前往后遍历，比根节点小的都是其左子树，
并且位于序列的左半部分，比其大的为其右子树，应该位于其右半部分。
左右子树按上述思路分别进行判断。

Answer:

public class Solution {
    public boolean test(int[] nums, int start, int end) {
        return helper(nums, start, end);
    }

    private boolean helper(int[] nums, int start, int end) {
        if (start == end) return true;
        int i = end - 1;
        while (nums[end] < nums[i] && i >= start) i--;
        if (!helper(nums, i + 1, end - 1))
            return false;
        int k = i;
        while (nums[end] > nums[i] && i >= start) i--;
        return helper(nums, start, k);
    }
}